<?php
/**
 * @file
 * Code for the Ding Randers feature.
 */
use OpenSearch\OpenSearchTingObjectCollection;

function ting_series_menu() {
  $items = array();

  $items['series/ting/ajax/%/%'] = array(
    'title' => 'Show search carousel results',
    'page callback' => 'ting_series_get_series',
    'page arguments' => array(3,4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
 return $items;
}


function ting_series_theme($existing, $type, $theme, $path) {
  return array(
      'ting_series_item' => array(
          'variables' => array(
              'title' => NULL,
              'series_title' => NULL,
              'cover' => NULL,
          ),
          'template' => 'ting-series-item',
          'path' => $path . '/templates',
      ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_series_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * AJAX callback to retrieve carousel items.
 *
 * @param int $index
 *   Configuration index.
 * @param int $offset
 *   Offset into result to fetch from.
 */
function ting_series_get_series($type, $query) {
  $query = urldecode($query);
  $cid = md5('new' . $query);
  $build = ting_series_find_entities($type, $query);
//file_put_contents("/var/www/drupal7vm/drupal/debug/series8.txt", print_r($build, TRUE), FILE_APPEND);


  if (isset($build)) {
    cache_set($cid, $build, 'cache_ting_series', REQUEST_TIME + 604800); //86400
  }

  $output = '';
  foreach ($build as $item) {
    $output .= '<li class="ding-carousel-item">' . $item . ' </li>';
  }

  // Return JSON output.
  drupal_json_output(array(
      'content' => $output,
      'offset' => 8,
  ));
}

function ting_series_is_series($object) {
  $series_titles = $object->reply->getSeriesTitles();

  $relevant_series_title = NULL;

  //file_put_contents("/var/www/drupal7vm/drupal/debug/other1.txt", print_r($series_titles, TRUE), FILE_APPEND);
  if (isset($series_titles) && !(empty($series_titles))) {
    foreach ($series_titles as $series_title) {
      if (strpos($series_title[0], 'Krimiserien med ') === 0) {
        return array(
            'query' => $series_title[0],
            'type' => 'title',
        );
      } elseif (count($series_title) == 2 && is_numeric($series_title[1])) {
        // We only include series which have a number in them. Other series
        // vary and have to dirty data to be used.
        $relevant_series_title = $series_title[0];
      }
    }
  }

  $series_description = ting_series_process_series_description($object->reply->getRawSeriesDescription());
  if (isset($series_description) && !empty($series_description)) {
    return array(
        'query' => $series_description,
        'type' => 'desc',
    );
  }

  if (isset($relevant_series_title)) {
    return array(
        'query' => $relevant_series_title,
        'type' => 'title',
    );
  }

  return NULL;
}

function ting_series_process_series_description($series_description) {
  $parts = explode(':', $series_description);

  if (is_array($parts) && count($parts) >= 2) {
    $prefix = $parts[0] . ': ';

    if (stripos($prefix, 'del af:') !== FALSE) {
      return trim($parts[1]);
    } elseif (stripos($prefix, 'Samhørende:') !== FALSE) {
      $first_title = explode(';', $parts[1]);
      return trim($first_title[0]);
    }
  }

  return FALSE;
}

/**
 * Find ting entities with covers from a query.
 *
 * @param string $query
 *   Query to use.
 * @param int $start
 *   Offset to start from.
 * @param int $size
 *   Search chunk size to use.
 * @param array $ignore
 *   Material ids to skip.
 *
 * @return array
 *   Array of found ting entities (an array), next start to use, and whether
 *   the result end was reached.
 */
function ting_series_find_entities($type, $query) {
  $items = array();
  $series_query = str_replace('@serietitle', drupal_strtolower($query), variable_get('ting_search_register_serie_title', 'phrase.titleSeries="@serietitle"'));
  $cqlDoctor = new TingSearchCqlDoctor($series_query );
  
  //We assume max size off series is 50. If the series is bigger then that its 
  //probable not at series which has relevance for the user.
  $sal_query = ting_start_query()
          ->withRawQuery($cqlDoctor->string_to_cql())
          ->withPage(1)
          ->withCount(50);

  $results = $sal_query->execute();
//file_put_contents("/var/www/drupal7vm/drupal/debug/series16.txt", print_r($results, TRUE), FILE_APPEND);
//file_put_contents("/var/www/drupalvm/drupal/web/debug/series1.txt", print_r($results, TRUE), FILE_APPEND);
  $objects = array();
  foreach ($results->openSearchResult->collections as $collection) {
    $objects[] = $collection->getPrimary_object();
  }
  
  $sorted_objects = ting_series_sort($objects, $query, $type);
  
  foreach ($sorted_objects as $object) {
    $cover = ting_series_get_cover($object);
    $series_title = ting_series_get_series_title($object, $query, $type);
    $items[] = theme('ting_series_item', array('title' => $object->getTitle(), 'series_title' => $series_title, 'cover' => $cover,));
  }

  return $items;
}

function ting_series_sort($objects, $query, $type) {
  $results = array();

  foreach ($objects as $object) {
    $series_number = ting_series_get_series_number($object, $query, $type);
    
    //If there is no number we wont show the object.
    if (isset($series_number)) {
      $results[$series_number] = $object; 
    }
  }
  //file_put_contents("/var/www/drupal7vm/drupal/debug/sort5.txt", print_r($results, TRUE), FILE_APPEND);
  ksort($results);
  return $results;

}

function ting_series_get_series_number($object, $query, $type) {
  if ($type == 'title') {
    $series_titles = $object->reply->getSeriesTitles();
    foreach ($series_titles as $series_title) {
      if ($series_title[0] == $query && isset($series_title[1])) {
        return $series_title[1];
      }
    }
  } elseif ($type == 'desc') {
    $series_description = $object->reply->getRawSeriesDescription();
    $series_number = ting_series_get_series_description_number($series_description);

    if ($series_number) {
      return $series_number;
    }
  }

  return NULL; 
}

function ting_series_get_series_description_number($series_description) {
  if (stripos($series_description, 'del af:') !== FALSE) {
    $parts = explode('.', $series_description);
    return trim($parts[0]);
  } elseif (stripos($series_description, 'Samhørende:') !== FALSE) {
    return 1; // The "Samhørende" object is always the first one.
  }
  return false; 
}

function ting_series_get_series_title($object, $query, $type) {
  if ($type == 'title') {
    $series_titles = $object->reply->getSeriesTitles();
    if (isset($series_titles) && !(empty($series_titles))) {
      foreach ($series_titles as $series_title) {
        if ($series_title[0] == $query && isset($series_title[1])) {
          return $series_title[0] . ' : ' . $series_title[1];
        }
      }
    }
  } elseif ($type == 'desc') {
    $series_description = $object->reply->getRawSeriesDescription();
    if (stripos($series_description, 'del af:') !== FALSE) {
      return $series_description;
    } elseif (stripos($series_description, 'Samhørende:') !== FALSE) {
      $parts = explode('Samhørende:', $series_description);
      $first_title = explode(';', $parts[1]);
      return 'Del 1 af: ' . trim($first_title[0]);
    }
  }
  return '';
}

function ting_series_get_cover($object) {
  $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ding_list_medium')));
  $options = array(
      'html' => TRUE,
      'attributes' => array('title' => $object->getTitle()),
  );
  return l($image, 'ting/collection/' . $object->id, $options);
}



